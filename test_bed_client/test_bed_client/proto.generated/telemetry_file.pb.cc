// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry_file.proto

#include "telemetry_file.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shapes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConvexHullShapePacket_shapes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5ffile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameSnapshotPacket_telemetry_5ffile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frame_5fstats_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameStatsMessage_frame_5fstats_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shapes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObbShapePacket_shapes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rigid_5fbody_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RigidBodyPacket_rigid_5fbody_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5ffile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShapeDataPacket_telemetry_5ffile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5ffile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ShapeFrameIterationPacket_telemetry_5ffile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shapes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TetrahedronShapePacket_shapes_2eproto;
namespace PhysicsTelemetry {
class FrameSnapshotPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameSnapshotPacket> _instance;
} _FrameSnapshotPacket_default_instance_;
class ShapeFrameIterationPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeFrameIterationPacket> _instance;
} _ShapeFrameIterationPacket_default_instance_;
class ShapeDataPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeDataPacket> _instance;
} _ShapeDataPacket_default_instance_;
class FrameDataPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameDataPacket> _instance;
} _FrameDataPacket_default_instance_;
}  // namespace PhysicsTelemetry
static void InitDefaultsscc_info_FrameDataPacket_telemetry_5ffile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PhysicsTelemetry::_FrameDataPacket_default_instance_;
    new (ptr) ::PhysicsTelemetry::FrameDataPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PhysicsTelemetry::FrameDataPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FrameDataPacket_telemetry_5ffile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FrameDataPacket_telemetry_5ffile_2eproto}, {
      &scc_info_FrameSnapshotPacket_telemetry_5ffile_2eproto.base,
      &scc_info_FrameStatsMessage_frame_5fstats_5fmessage_2eproto.base,
      &scc_info_ShapeDataPacket_telemetry_5ffile_2eproto.base,}};

static void InitDefaultsscc_info_FrameSnapshotPacket_telemetry_5ffile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PhysicsTelemetry::_FrameSnapshotPacket_default_instance_;
    new (ptr) ::PhysicsTelemetry::FrameSnapshotPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PhysicsTelemetry::FrameSnapshotPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameSnapshotPacket_telemetry_5ffile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameSnapshotPacket_telemetry_5ffile_2eproto}, {
      &scc_info_RigidBodyPacket_rigid_5fbody_2eproto.base,}};

static void InitDefaultsscc_info_ShapeDataPacket_telemetry_5ffile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PhysicsTelemetry::_ShapeDataPacket_default_instance_;
    new (ptr) ::PhysicsTelemetry::ShapeDataPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PhysicsTelemetry::ShapeDataPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShapeDataPacket_telemetry_5ffile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShapeDataPacket_telemetry_5ffile_2eproto}, {
      &scc_info_ShapeFrameIterationPacket_telemetry_5ffile_2eproto.base,}};

static void InitDefaultsscc_info_ShapeFrameIterationPacket_telemetry_5ffile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PhysicsTelemetry::_ShapeFrameIterationPacket_default_instance_;
    new (ptr) ::PhysicsTelemetry::ShapeFrameIterationPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PhysicsTelemetry::ShapeFrameIterationPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ShapeFrameIterationPacket_telemetry_5ffile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ShapeFrameIterationPacket_telemetry_5ffile_2eproto}, {
      &scc_info_ObbShapePacket_shapes_2eproto.base,
      &scc_info_TetrahedronShapePacket_shapes_2eproto.base,
      &scc_info_ConvexHullShapePacket_shapes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_telemetry_5ffile_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_telemetry_5ffile_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_telemetry_5ffile_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_telemetry_5ffile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::FrameSnapshotPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::FrameSnapshotPacket, frameid_),
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::FrameSnapshotPacket, rigidbodies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::ShapeFrameIterationPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::ShapeFrameIterationPacket, frameid_),
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::ShapeFrameIterationPacket, shapetype_),
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::ShapeFrameIterationPacket, obbshape_),
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::ShapeFrameIterationPacket, tetrahedronshape_),
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::ShapeFrameIterationPacket, convexhullshape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::ShapeDataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::ShapeDataPacket, shapes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::FrameDataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::FrameDataPacket, frames_),
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::FrameDataPacket, framestats_),
  PROTOBUF_FIELD_OFFSET(::PhysicsTelemetry::FrameDataPacket, shapedata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PhysicsTelemetry::FrameSnapshotPacket)},
  { 7, -1, sizeof(::PhysicsTelemetry::ShapeFrameIterationPacket)},
  { 17, -1, sizeof(::PhysicsTelemetry::ShapeDataPacket)},
  { 23, -1, sizeof(::PhysicsTelemetry::FrameDataPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PhysicsTelemetry::_FrameSnapshotPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PhysicsTelemetry::_ShapeFrameIterationPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PhysicsTelemetry::_ShapeDataPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PhysicsTelemetry::_FrameDataPacket_default_instance_),
};

const char descriptor_table_protodef_telemetry_5ffile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024telemetry_file.proto\022\020PhysicsTelemetry"
  "\032\020rigid_body.proto\032\014shapes.proto\032\031frame_"
  "stats_message.proto\"^\n\023FrameSnapshotPack"
  "et\022\017\n\007frameId\030\001 \001(\005\0226\n\013rigidBodies\030\002 \003(\013"
  "2!.PhysicsTelemetry.RigidBodyPacket\"\234\002\n\031"
  "ShapeFrameIterationPacket\022\017\n\007frameId\030\001 \001"
  "(\005\0224\n\tshapeType\030\002 \001(\0162!.PhysicsTelemetry"
  ".ShapeTypePacket\0222\n\010obbShape\030\003 \001(\0132 .Phy"
  "sicsTelemetry.ObbShapePacket\022B\n\020tetrahed"
  "ronShape\030\004 \001(\0132(.PhysicsTelemetry.Tetrah"
  "edronShapePacket\022@\n\017convexHullShape\030\005 \001("
  "\0132\'.PhysicsTelemetry.ConvexHullShapePack"
  "et\"N\n\017ShapeDataPacket\022;\n\006shapes\030\001 \003(\0132+."
  "PhysicsTelemetry.ShapeFrameIterationPack"
  "et\"\267\001\n\017FrameDataPacket\0225\n\006frames\030\001 \003(\0132%"
  ".PhysicsTelemetry.FrameSnapshotPacket\0227\n"
  "\nframeStats\030\002 \003(\0132#.PhysicsTelemetry.Fra"
  "meStatsMessage\0224\n\tshapeData\030\003 \001(\0132!.Phys"
  "icsTelemetry.ShapeDataPacketB\037\252\002\034Physics"
  ".Telemetry.Serialisedb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_telemetry_5ffile_2eproto_deps[3] = {
  &::descriptor_table_frame_5fstats_5fmessage_2eproto,
  &::descriptor_table_rigid_5fbody_2eproto,
  &::descriptor_table_shapes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_telemetry_5ffile_2eproto_sccs[4] = {
  &scc_info_FrameDataPacket_telemetry_5ffile_2eproto.base,
  &scc_info_FrameSnapshotPacket_telemetry_5ffile_2eproto.base,
  &scc_info_ShapeDataPacket_telemetry_5ffile_2eproto.base,
  &scc_info_ShapeFrameIterationPacket_telemetry_5ffile_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_telemetry_5ffile_2eproto_once;
static bool descriptor_table_telemetry_5ffile_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_5ffile_2eproto = {
  &descriptor_table_telemetry_5ffile_2eproto_initialized, descriptor_table_protodef_telemetry_5ffile_2eproto, "telemetry_file.proto", 789,
  &descriptor_table_telemetry_5ffile_2eproto_once, descriptor_table_telemetry_5ffile_2eproto_sccs, descriptor_table_telemetry_5ffile_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_telemetry_5ffile_2eproto::offsets,
  file_level_metadata_telemetry_5ffile_2eproto, 4, file_level_enum_descriptors_telemetry_5ffile_2eproto, file_level_service_descriptors_telemetry_5ffile_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_telemetry_5ffile_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_telemetry_5ffile_2eproto), true);
namespace PhysicsTelemetry {

// ===================================================================

void FrameSnapshotPacket::InitAsDefaultInstance() {
}
class FrameSnapshotPacket::_Internal {
 public:
};

void FrameSnapshotPacket::clear_rigidbodies() {
  rigidbodies_.Clear();
}
FrameSnapshotPacket::FrameSnapshotPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhysicsTelemetry.FrameSnapshotPacket)
}
FrameSnapshotPacket::FrameSnapshotPacket(const FrameSnapshotPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rigidbodies_(from.rigidbodies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frameid_ = from.frameid_;
  // @@protoc_insertion_point(copy_constructor:PhysicsTelemetry.FrameSnapshotPacket)
}

void FrameSnapshotPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameSnapshotPacket_telemetry_5ffile_2eproto.base);
  frameid_ = 0;
}

FrameSnapshotPacket::~FrameSnapshotPacket() {
  // @@protoc_insertion_point(destructor:PhysicsTelemetry.FrameSnapshotPacket)
  SharedDtor();
}

void FrameSnapshotPacket::SharedDtor() {
}

void FrameSnapshotPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameSnapshotPacket& FrameSnapshotPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameSnapshotPacket_telemetry_5ffile_2eproto.base);
  return *internal_default_instance();
}


void FrameSnapshotPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:PhysicsTelemetry.FrameSnapshotPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rigidbodies_.Clear();
  frameid_ = 0;
  _internal_metadata_.Clear();
}

const char* FrameSnapshotPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PhysicsTelemetry.RigidBodyPacket rigidBodies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rigidbodies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameSnapshotPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PhysicsTelemetry.FrameSnapshotPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frameId = 1;
  if (this->frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frameid(), target);
  }

  // repeated .PhysicsTelemetry.RigidBodyPacket rigidBodies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rigidbodies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rigidbodies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PhysicsTelemetry.FrameSnapshotPacket)
  return target;
}

size_t FrameSnapshotPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhysicsTelemetry.FrameSnapshotPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PhysicsTelemetry.RigidBodyPacket rigidBodies = 2;
  total_size += 1UL * this->_internal_rigidbodies_size();
  for (const auto& msg : this->rigidbodies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frameId = 1;
  if (this->frameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameSnapshotPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhysicsTelemetry.FrameSnapshotPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameSnapshotPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameSnapshotPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhysicsTelemetry.FrameSnapshotPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhysicsTelemetry.FrameSnapshotPacket)
    MergeFrom(*source);
  }
}

void FrameSnapshotPacket::MergeFrom(const FrameSnapshotPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhysicsTelemetry.FrameSnapshotPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rigidbodies_.MergeFrom(from.rigidbodies_);
  if (from.frameid() != 0) {
    _internal_set_frameid(from._internal_frameid());
  }
}

void FrameSnapshotPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhysicsTelemetry.FrameSnapshotPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameSnapshotPacket::CopyFrom(const FrameSnapshotPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhysicsTelemetry.FrameSnapshotPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameSnapshotPacket::IsInitialized() const {
  return true;
}

void FrameSnapshotPacket::InternalSwap(FrameSnapshotPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rigidbodies_.InternalSwap(&other->rigidbodies_);
  swap(frameid_, other->frameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameSnapshotPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShapeFrameIterationPacket::InitAsDefaultInstance() {
  ::PhysicsTelemetry::_ShapeFrameIterationPacket_default_instance_._instance.get_mutable()->obbshape_ = const_cast< ::PhysicsTelemetry::ObbShapePacket*>(
      ::PhysicsTelemetry::ObbShapePacket::internal_default_instance());
  ::PhysicsTelemetry::_ShapeFrameIterationPacket_default_instance_._instance.get_mutable()->tetrahedronshape_ = const_cast< ::PhysicsTelemetry::TetrahedronShapePacket*>(
      ::PhysicsTelemetry::TetrahedronShapePacket::internal_default_instance());
  ::PhysicsTelemetry::_ShapeFrameIterationPacket_default_instance_._instance.get_mutable()->convexhullshape_ = const_cast< ::PhysicsTelemetry::ConvexHullShapePacket*>(
      ::PhysicsTelemetry::ConvexHullShapePacket::internal_default_instance());
}
class ShapeFrameIterationPacket::_Internal {
 public:
  static const ::PhysicsTelemetry::ObbShapePacket& obbshape(const ShapeFrameIterationPacket* msg);
  static const ::PhysicsTelemetry::TetrahedronShapePacket& tetrahedronshape(const ShapeFrameIterationPacket* msg);
  static const ::PhysicsTelemetry::ConvexHullShapePacket& convexhullshape(const ShapeFrameIterationPacket* msg);
};

const ::PhysicsTelemetry::ObbShapePacket&
ShapeFrameIterationPacket::_Internal::obbshape(const ShapeFrameIterationPacket* msg) {
  return *msg->obbshape_;
}
const ::PhysicsTelemetry::TetrahedronShapePacket&
ShapeFrameIterationPacket::_Internal::tetrahedronshape(const ShapeFrameIterationPacket* msg) {
  return *msg->tetrahedronshape_;
}
const ::PhysicsTelemetry::ConvexHullShapePacket&
ShapeFrameIterationPacket::_Internal::convexhullshape(const ShapeFrameIterationPacket* msg) {
  return *msg->convexhullshape_;
}
void ShapeFrameIterationPacket::clear_obbshape() {
  if (GetArenaNoVirtual() == nullptr && obbshape_ != nullptr) {
    delete obbshape_;
  }
  obbshape_ = nullptr;
}
void ShapeFrameIterationPacket::clear_tetrahedronshape() {
  if (GetArenaNoVirtual() == nullptr && tetrahedronshape_ != nullptr) {
    delete tetrahedronshape_;
  }
  tetrahedronshape_ = nullptr;
}
void ShapeFrameIterationPacket::clear_convexhullshape() {
  if (GetArenaNoVirtual() == nullptr && convexhullshape_ != nullptr) {
    delete convexhullshape_;
  }
  convexhullshape_ = nullptr;
}
ShapeFrameIterationPacket::ShapeFrameIterationPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhysicsTelemetry.ShapeFrameIterationPacket)
}
ShapeFrameIterationPacket::ShapeFrameIterationPacket(const ShapeFrameIterationPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_obbshape()) {
    obbshape_ = new ::PhysicsTelemetry::ObbShapePacket(*from.obbshape_);
  } else {
    obbshape_ = nullptr;
  }
  if (from._internal_has_tetrahedronshape()) {
    tetrahedronshape_ = new ::PhysicsTelemetry::TetrahedronShapePacket(*from.tetrahedronshape_);
  } else {
    tetrahedronshape_ = nullptr;
  }
  if (from._internal_has_convexhullshape()) {
    convexhullshape_ = new ::PhysicsTelemetry::ConvexHullShapePacket(*from.convexhullshape_);
  } else {
    convexhullshape_ = nullptr;
  }
  ::memcpy(&frameid_, &from.frameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&shapetype_) -
    reinterpret_cast<char*>(&frameid_)) + sizeof(shapetype_));
  // @@protoc_insertion_point(copy_constructor:PhysicsTelemetry.ShapeFrameIterationPacket)
}

void ShapeFrameIterationPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShapeFrameIterationPacket_telemetry_5ffile_2eproto.base);
  ::memset(&obbshape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shapetype_) -
      reinterpret_cast<char*>(&obbshape_)) + sizeof(shapetype_));
}

ShapeFrameIterationPacket::~ShapeFrameIterationPacket() {
  // @@protoc_insertion_point(destructor:PhysicsTelemetry.ShapeFrameIterationPacket)
  SharedDtor();
}

void ShapeFrameIterationPacket::SharedDtor() {
  if (this != internal_default_instance()) delete obbshape_;
  if (this != internal_default_instance()) delete tetrahedronshape_;
  if (this != internal_default_instance()) delete convexhullshape_;
}

void ShapeFrameIterationPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeFrameIterationPacket& ShapeFrameIterationPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeFrameIterationPacket_telemetry_5ffile_2eproto.base);
  return *internal_default_instance();
}


void ShapeFrameIterationPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:PhysicsTelemetry.ShapeFrameIterationPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && obbshape_ != nullptr) {
    delete obbshape_;
  }
  obbshape_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tetrahedronshape_ != nullptr) {
    delete tetrahedronshape_;
  }
  tetrahedronshape_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && convexhullshape_ != nullptr) {
    delete convexhullshape_;
  }
  convexhullshape_ = nullptr;
  ::memset(&frameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shapetype_) -
      reinterpret_cast<char*>(&frameid_)) + sizeof(shapetype_));
  _internal_metadata_.Clear();
}

const char* ShapeFrameIterationPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PhysicsTelemetry.ShapeTypePacket shapeType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_shapetype(static_cast<::PhysicsTelemetry::ShapeTypePacket>(val));
        } else goto handle_unusual;
        continue;
      // .PhysicsTelemetry.ObbShapePacket obbShape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_obbshape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PhysicsTelemetry.TetrahedronShapePacket tetrahedronShape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tetrahedronshape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PhysicsTelemetry.ConvexHullShapePacket convexHullShape = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_convexhullshape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeFrameIterationPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PhysicsTelemetry.ShapeFrameIterationPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frameId = 1;
  if (this->frameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frameid(), target);
  }

  // .PhysicsTelemetry.ShapeTypePacket shapeType = 2;
  if (this->shapetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_shapetype(), target);
  }

  // .PhysicsTelemetry.ObbShapePacket obbShape = 3;
  if (this->has_obbshape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::obbshape(this), target, stream);
  }

  // .PhysicsTelemetry.TetrahedronShapePacket tetrahedronShape = 4;
  if (this->has_tetrahedronshape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tetrahedronshape(this), target, stream);
  }

  // .PhysicsTelemetry.ConvexHullShapePacket convexHullShape = 5;
  if (this->has_convexhullshape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::convexhullshape(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PhysicsTelemetry.ShapeFrameIterationPacket)
  return target;
}

size_t ShapeFrameIterationPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhysicsTelemetry.ShapeFrameIterationPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PhysicsTelemetry.ObbShapePacket obbShape = 3;
  if (this->has_obbshape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obbshape_);
  }

  // .PhysicsTelemetry.TetrahedronShapePacket tetrahedronShape = 4;
  if (this->has_tetrahedronshape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tetrahedronshape_);
  }

  // .PhysicsTelemetry.ConvexHullShapePacket convexHullShape = 5;
  if (this->has_convexhullshape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *convexhullshape_);
  }

  // int32 frameId = 1;
  if (this->frameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frameid());
  }

  // .PhysicsTelemetry.ShapeTypePacket shapeType = 2;
  if (this->shapetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shapetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeFrameIterationPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhysicsTelemetry.ShapeFrameIterationPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeFrameIterationPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeFrameIterationPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhysicsTelemetry.ShapeFrameIterationPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhysicsTelemetry.ShapeFrameIterationPacket)
    MergeFrom(*source);
  }
}

void ShapeFrameIterationPacket::MergeFrom(const ShapeFrameIterationPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhysicsTelemetry.ShapeFrameIterationPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_obbshape()) {
    _internal_mutable_obbshape()->::PhysicsTelemetry::ObbShapePacket::MergeFrom(from._internal_obbshape());
  }
  if (from.has_tetrahedronshape()) {
    _internal_mutable_tetrahedronshape()->::PhysicsTelemetry::TetrahedronShapePacket::MergeFrom(from._internal_tetrahedronshape());
  }
  if (from.has_convexhullshape()) {
    _internal_mutable_convexhullshape()->::PhysicsTelemetry::ConvexHullShapePacket::MergeFrom(from._internal_convexhullshape());
  }
  if (from.frameid() != 0) {
    _internal_set_frameid(from._internal_frameid());
  }
  if (from.shapetype() != 0) {
    _internal_set_shapetype(from._internal_shapetype());
  }
}

void ShapeFrameIterationPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhysicsTelemetry.ShapeFrameIterationPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeFrameIterationPacket::CopyFrom(const ShapeFrameIterationPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhysicsTelemetry.ShapeFrameIterationPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeFrameIterationPacket::IsInitialized() const {
  return true;
}

void ShapeFrameIterationPacket::InternalSwap(ShapeFrameIterationPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(obbshape_, other->obbshape_);
  swap(tetrahedronshape_, other->tetrahedronshape_);
  swap(convexhullshape_, other->convexhullshape_);
  swap(frameid_, other->frameid_);
  swap(shapetype_, other->shapetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeFrameIterationPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShapeDataPacket::InitAsDefaultInstance() {
}
class ShapeDataPacket::_Internal {
 public:
};

ShapeDataPacket::ShapeDataPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhysicsTelemetry.ShapeDataPacket)
}
ShapeDataPacket::ShapeDataPacket(const ShapeDataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shapes_(from.shapes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PhysicsTelemetry.ShapeDataPacket)
}

void ShapeDataPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShapeDataPacket_telemetry_5ffile_2eproto.base);
}

ShapeDataPacket::~ShapeDataPacket() {
  // @@protoc_insertion_point(destructor:PhysicsTelemetry.ShapeDataPacket)
  SharedDtor();
}

void ShapeDataPacket::SharedDtor() {
}

void ShapeDataPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeDataPacket& ShapeDataPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeDataPacket_telemetry_5ffile_2eproto.base);
  return *internal_default_instance();
}


void ShapeDataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:PhysicsTelemetry.ShapeDataPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  _internal_metadata_.Clear();
}

const char* ShapeDataPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PhysicsTelemetry.ShapeFrameIterationPacket shapes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeDataPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PhysicsTelemetry.ShapeDataPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PhysicsTelemetry.ShapeFrameIterationPacket shapes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shapes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PhysicsTelemetry.ShapeDataPacket)
  return target;
}

size_t ShapeDataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhysicsTelemetry.ShapeDataPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PhysicsTelemetry.ShapeFrameIterationPacket shapes = 1;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeDataPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhysicsTelemetry.ShapeDataPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeDataPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeDataPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhysicsTelemetry.ShapeDataPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhysicsTelemetry.ShapeDataPacket)
    MergeFrom(*source);
  }
}

void ShapeDataPacket::MergeFrom(const ShapeDataPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhysicsTelemetry.ShapeDataPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
}

void ShapeDataPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhysicsTelemetry.ShapeDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeDataPacket::CopyFrom(const ShapeDataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhysicsTelemetry.ShapeDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeDataPacket::IsInitialized() const {
  return true;
}

void ShapeDataPacket::InternalSwap(ShapeDataPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shapes_.InternalSwap(&other->shapes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeDataPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameDataPacket::InitAsDefaultInstance() {
  ::PhysicsTelemetry::_FrameDataPacket_default_instance_._instance.get_mutable()->shapedata_ = const_cast< ::PhysicsTelemetry::ShapeDataPacket*>(
      ::PhysicsTelemetry::ShapeDataPacket::internal_default_instance());
}
class FrameDataPacket::_Internal {
 public:
  static const ::PhysicsTelemetry::ShapeDataPacket& shapedata(const FrameDataPacket* msg);
};

const ::PhysicsTelemetry::ShapeDataPacket&
FrameDataPacket::_Internal::shapedata(const FrameDataPacket* msg) {
  return *msg->shapedata_;
}
void FrameDataPacket::clear_framestats() {
  framestats_.Clear();
}
FrameDataPacket::FrameDataPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhysicsTelemetry.FrameDataPacket)
}
FrameDataPacket::FrameDataPacket(const FrameDataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      frames_(from.frames_),
      framestats_(from.framestats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_shapedata()) {
    shapedata_ = new ::PhysicsTelemetry::ShapeDataPacket(*from.shapedata_);
  } else {
    shapedata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PhysicsTelemetry.FrameDataPacket)
}

void FrameDataPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameDataPacket_telemetry_5ffile_2eproto.base);
  shapedata_ = nullptr;
}

FrameDataPacket::~FrameDataPacket() {
  // @@protoc_insertion_point(destructor:PhysicsTelemetry.FrameDataPacket)
  SharedDtor();
}

void FrameDataPacket::SharedDtor() {
  if (this != internal_default_instance()) delete shapedata_;
}

void FrameDataPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameDataPacket& FrameDataPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameDataPacket_telemetry_5ffile_2eproto.base);
  return *internal_default_instance();
}


void FrameDataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:PhysicsTelemetry.FrameDataPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  framestats_.Clear();
  if (GetArenaNoVirtual() == nullptr && shapedata_ != nullptr) {
    delete shapedata_;
  }
  shapedata_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FrameDataPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PhysicsTelemetry.FrameSnapshotPacket frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PhysicsTelemetry.FrameStatsMessage frameStats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_framestats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .PhysicsTelemetry.ShapeDataPacket shapeData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shapedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameDataPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PhysicsTelemetry.FrameDataPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PhysicsTelemetry.FrameSnapshotPacket frames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_frames(i), target, stream);
  }

  // repeated .PhysicsTelemetry.FrameStatsMessage frameStats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_framestats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_framestats(i), target, stream);
  }

  // .PhysicsTelemetry.ShapeDataPacket shapeData = 3;
  if (this->has_shapedata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shapedata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PhysicsTelemetry.FrameDataPacket)
  return target;
}

size_t FrameDataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhysicsTelemetry.FrameDataPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PhysicsTelemetry.FrameSnapshotPacket frames = 1;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PhysicsTelemetry.FrameStatsMessage frameStats = 2;
  total_size += 1UL * this->_internal_framestats_size();
  for (const auto& msg : this->framestats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PhysicsTelemetry.ShapeDataPacket shapeData = 3;
  if (this->has_shapedata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shapedata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameDataPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhysicsTelemetry.FrameDataPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameDataPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameDataPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhysicsTelemetry.FrameDataPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhysicsTelemetry.FrameDataPacket)
    MergeFrom(*source);
  }
}

void FrameDataPacket::MergeFrom(const FrameDataPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhysicsTelemetry.FrameDataPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  framestats_.MergeFrom(from.framestats_);
  if (from.has_shapedata()) {
    _internal_mutable_shapedata()->::PhysicsTelemetry::ShapeDataPacket::MergeFrom(from._internal_shapedata());
  }
}

void FrameDataPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhysicsTelemetry.FrameDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameDataPacket::CopyFrom(const FrameDataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhysicsTelemetry.FrameDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameDataPacket::IsInitialized() const {
  return true;
}

void FrameDataPacket::InternalSwap(FrameDataPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
  framestats_.InternalSwap(&other->framestats_);
  swap(shapedata_, other->shapedata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameDataPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PhysicsTelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PhysicsTelemetry::FrameSnapshotPacket* Arena::CreateMaybeMessage< ::PhysicsTelemetry::FrameSnapshotPacket >(Arena* arena) {
  return Arena::CreateInternal< ::PhysicsTelemetry::FrameSnapshotPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::PhysicsTelemetry::ShapeFrameIterationPacket* Arena::CreateMaybeMessage< ::PhysicsTelemetry::ShapeFrameIterationPacket >(Arena* arena) {
  return Arena::CreateInternal< ::PhysicsTelemetry::ShapeFrameIterationPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::PhysicsTelemetry::ShapeDataPacket* Arena::CreateMaybeMessage< ::PhysicsTelemetry::ShapeDataPacket >(Arena* arena) {
  return Arena::CreateInternal< ::PhysicsTelemetry::ShapeDataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::PhysicsTelemetry::FrameDataPacket* Arena::CreateMaybeMessage< ::PhysicsTelemetry::FrameDataPacket >(Arena* arena) {
  return Arena::CreateInternal< ::PhysicsTelemetry::FrameDataPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
