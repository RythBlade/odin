// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: frame_stats_message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Physics.Telemetry.Serialised {

  /// <summary>Holder for reflection information generated from frame_stats_message.proto</summary>
  public static partial class FrameStatsMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for frame_stats_message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FrameStatsMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlmcmFtZV9zdGF0c19tZXNzYWdlLnByb3RvEhBQaHlzaWNzVGVsZW1ldHJ5",
            "IlwKEUZyYW1lU3RhdHNNZXNzYWdlEg8KB2ZyYW1lSWQYASABKAUSGQoRY29u",
            "c3VtZWRGcmFtZVRpbWUYAiABKAISGwoTZnJhbWVQcm9jZXNzaW5nVGltZRgD",
            "IAEoAkIfqgIcUGh5c2ljcy5UZWxlbWV0cnkuU2VyaWFsaXNlZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Physics.Telemetry.Serialised.FrameStatsMessage), global::Physics.Telemetry.Serialised.FrameStatsMessage.Parser, new[]{ "FrameId", "ConsumedFrameTime", "FrameProcessingTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FrameStatsMessage : pb::IMessage<FrameStatsMessage> {
    private static readonly pb::MessageParser<FrameStatsMessage> _parser = new pb::MessageParser<FrameStatsMessage>(() => new FrameStatsMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameStatsMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Physics.Telemetry.Serialised.FrameStatsMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameStatsMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameStatsMessage(FrameStatsMessage other) : this() {
      frameId_ = other.frameId_;
      consumedFrameTime_ = other.consumedFrameTime_;
      frameProcessingTime_ = other.frameProcessingTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameStatsMessage Clone() {
      return new FrameStatsMessage(this);
    }

    /// <summary>Field number for the "frameId" field.</summary>
    public const int FrameIdFieldNumber = 1;
    private int frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    /// <summary>Field number for the "consumedFrameTime" field.</summary>
    public const int ConsumedFrameTimeFieldNumber = 2;
    private float consumedFrameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConsumedFrameTime {
      get { return consumedFrameTime_; }
      set {
        consumedFrameTime_ = value;
      }
    }

    /// <summary>Field number for the "frameProcessingTime" field.</summary>
    public const int FrameProcessingTimeFieldNumber = 3;
    private float frameProcessingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FrameProcessingTime {
      get { return frameProcessingTime_; }
      set {
        frameProcessingTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameStatsMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameStatsMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameId != other.FrameId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConsumedFrameTime, other.ConsumedFrameTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrameProcessingTime, other.FrameProcessingTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameId != 0) hash ^= FrameId.GetHashCode();
      if (ConsumedFrameTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConsumedFrameTime);
      if (FrameProcessingTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrameProcessingTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameId);
      }
      if (ConsumedFrameTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ConsumedFrameTime);
      }
      if (FrameProcessingTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FrameProcessingTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameId);
      }
      if (ConsumedFrameTime != 0F) {
        size += 1 + 4;
      }
      if (FrameProcessingTime != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameStatsMessage other) {
      if (other == null) {
        return;
      }
      if (other.FrameId != 0) {
        FrameId = other.FrameId;
      }
      if (other.ConsumedFrameTime != 0F) {
        ConsumedFrameTime = other.ConsumedFrameTime;
      }
      if (other.FrameProcessingTime != 0F) {
        FrameProcessingTime = other.FrameProcessingTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameId = input.ReadInt32();
            break;
          }
          case 21: {
            ConsumedFrameTime = input.ReadFloat();
            break;
          }
          case 29: {
            FrameProcessingTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
