// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry_file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_telemetry_5ffile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_telemetry_5ffile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "rigid_body.pb.h"
#include "shapes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_telemetry_5ffile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_telemetry_5ffile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_5ffile_2eproto;
namespace PhysicsTelemetry {
class FrameDataPacket;
class FrameDataPacketDefaultTypeInternal;
extern FrameDataPacketDefaultTypeInternal _FrameDataPacket_default_instance_;
class FrameSnapshotPacket;
class FrameSnapshotPacketDefaultTypeInternal;
extern FrameSnapshotPacketDefaultTypeInternal _FrameSnapshotPacket_default_instance_;
class ShapeDataPacket;
class ShapeDataPacketDefaultTypeInternal;
extern ShapeDataPacketDefaultTypeInternal _ShapeDataPacket_default_instance_;
class ShapeFrameIterationPacket;
class ShapeFrameIterationPacketDefaultTypeInternal;
extern ShapeFrameIterationPacketDefaultTypeInternal _ShapeFrameIterationPacket_default_instance_;
}  // namespace PhysicsTelemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::PhysicsTelemetry::FrameDataPacket* Arena::CreateMaybeMessage<::PhysicsTelemetry::FrameDataPacket>(Arena*);
template<> ::PhysicsTelemetry::FrameSnapshotPacket* Arena::CreateMaybeMessage<::PhysicsTelemetry::FrameSnapshotPacket>(Arena*);
template<> ::PhysicsTelemetry::ShapeDataPacket* Arena::CreateMaybeMessage<::PhysicsTelemetry::ShapeDataPacket>(Arena*);
template<> ::PhysicsTelemetry::ShapeFrameIterationPacket* Arena::CreateMaybeMessage<::PhysicsTelemetry::ShapeFrameIterationPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PhysicsTelemetry {

// ===================================================================

class FrameSnapshotPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PhysicsTelemetry.FrameSnapshotPacket) */ {
 public:
  FrameSnapshotPacket();
  virtual ~FrameSnapshotPacket();

  FrameSnapshotPacket(const FrameSnapshotPacket& from);
  FrameSnapshotPacket(FrameSnapshotPacket&& from) noexcept
    : FrameSnapshotPacket() {
    *this = ::std::move(from);
  }

  inline FrameSnapshotPacket& operator=(const FrameSnapshotPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSnapshotPacket& operator=(FrameSnapshotPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameSnapshotPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameSnapshotPacket* internal_default_instance() {
    return reinterpret_cast<const FrameSnapshotPacket*>(
               &_FrameSnapshotPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameSnapshotPacket& a, FrameSnapshotPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSnapshotPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameSnapshotPacket* New() const final {
    return CreateMaybeMessage<FrameSnapshotPacket>(nullptr);
  }

  FrameSnapshotPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameSnapshotPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameSnapshotPacket& from);
  void MergeFrom(const FrameSnapshotPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSnapshotPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PhysicsTelemetry.FrameSnapshotPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_5ffile_2eproto);
    return ::descriptor_table_telemetry_5ffile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRigidBodiesFieldNumber = 2,
    kFrameIdFieldNumber = 1,
  };
  // repeated .PhysicsTelemetry.RigidBodyPacket rigidBodies = 2;
  int rigidbodies_size() const;
  private:
  int _internal_rigidbodies_size() const;
  public:
  void clear_rigidbodies();
  ::PhysicsTelemetry::RigidBodyPacket* mutable_rigidbodies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::RigidBodyPacket >*
      mutable_rigidbodies();
  private:
  const ::PhysicsTelemetry::RigidBodyPacket& _internal_rigidbodies(int index) const;
  ::PhysicsTelemetry::RigidBodyPacket* _internal_add_rigidbodies();
  public:
  const ::PhysicsTelemetry::RigidBodyPacket& rigidbodies(int index) const;
  ::PhysicsTelemetry::RigidBodyPacket* add_rigidbodies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::RigidBodyPacket >&
      rigidbodies() const;

  // uint32 frameId = 1;
  void clear_frameid();
  ::PROTOBUF_NAMESPACE_ID::uint32 frameid() const;
  void set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frameid() const;
  void _internal_set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PhysicsTelemetry.FrameSnapshotPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::RigidBodyPacket > rigidbodies_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5ffile_2eproto;
};
// -------------------------------------------------------------------

class ShapeFrameIterationPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PhysicsTelemetry.ShapeFrameIterationPacket) */ {
 public:
  ShapeFrameIterationPacket();
  virtual ~ShapeFrameIterationPacket();

  ShapeFrameIterationPacket(const ShapeFrameIterationPacket& from);
  ShapeFrameIterationPacket(ShapeFrameIterationPacket&& from) noexcept
    : ShapeFrameIterationPacket() {
    *this = ::std::move(from);
  }

  inline ShapeFrameIterationPacket& operator=(const ShapeFrameIterationPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeFrameIterationPacket& operator=(ShapeFrameIterationPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShapeFrameIterationPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShapeFrameIterationPacket* internal_default_instance() {
    return reinterpret_cast<const ShapeFrameIterationPacket*>(
               &_ShapeFrameIterationPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShapeFrameIterationPacket& a, ShapeFrameIterationPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeFrameIterationPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeFrameIterationPacket* New() const final {
    return CreateMaybeMessage<ShapeFrameIterationPacket>(nullptr);
  }

  ShapeFrameIterationPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeFrameIterationPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeFrameIterationPacket& from);
  void MergeFrom(const ShapeFrameIterationPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeFrameIterationPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PhysicsTelemetry.ShapeFrameIterationPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_5ffile_2eproto);
    return ::descriptor_table_telemetry_5ffile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObbShapeFieldNumber = 3,
    kTetrahedronShapeFieldNumber = 4,
    kConvexHullShapeFieldNumber = 5,
    kFrameIdFieldNumber = 1,
    kShapeTypeFieldNumber = 2,
  };
  // .PhysicsTelemetry.ObbShapePacket obbShape = 3;
  bool has_obbshape() const;
  private:
  bool _internal_has_obbshape() const;
  public:
  void clear_obbshape();
  const ::PhysicsTelemetry::ObbShapePacket& obbshape() const;
  ::PhysicsTelemetry::ObbShapePacket* release_obbshape();
  ::PhysicsTelemetry::ObbShapePacket* mutable_obbshape();
  void set_allocated_obbshape(::PhysicsTelemetry::ObbShapePacket* obbshape);
  private:
  const ::PhysicsTelemetry::ObbShapePacket& _internal_obbshape() const;
  ::PhysicsTelemetry::ObbShapePacket* _internal_mutable_obbshape();
  public:

  // .PhysicsTelemetry.TetrahedronShapePacket tetrahedronShape = 4;
  bool has_tetrahedronshape() const;
  private:
  bool _internal_has_tetrahedronshape() const;
  public:
  void clear_tetrahedronshape();
  const ::PhysicsTelemetry::TetrahedronShapePacket& tetrahedronshape() const;
  ::PhysicsTelemetry::TetrahedronShapePacket* release_tetrahedronshape();
  ::PhysicsTelemetry::TetrahedronShapePacket* mutable_tetrahedronshape();
  void set_allocated_tetrahedronshape(::PhysicsTelemetry::TetrahedronShapePacket* tetrahedronshape);
  private:
  const ::PhysicsTelemetry::TetrahedronShapePacket& _internal_tetrahedronshape() const;
  ::PhysicsTelemetry::TetrahedronShapePacket* _internal_mutable_tetrahedronshape();
  public:

  // .PhysicsTelemetry.ConvexHullShapePacket convexHullShape = 5;
  bool has_convexhullshape() const;
  private:
  bool _internal_has_convexhullshape() const;
  public:
  void clear_convexhullshape();
  const ::PhysicsTelemetry::ConvexHullShapePacket& convexhullshape() const;
  ::PhysicsTelemetry::ConvexHullShapePacket* release_convexhullshape();
  ::PhysicsTelemetry::ConvexHullShapePacket* mutable_convexhullshape();
  void set_allocated_convexhullshape(::PhysicsTelemetry::ConvexHullShapePacket* convexhullshape);
  private:
  const ::PhysicsTelemetry::ConvexHullShapePacket& _internal_convexhullshape() const;
  ::PhysicsTelemetry::ConvexHullShapePacket* _internal_mutable_convexhullshape();
  public:

  // uint32 frameId = 1;
  void clear_frameid();
  ::PROTOBUF_NAMESPACE_ID::uint32 frameid() const;
  void set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frameid() const;
  void _internal_set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .PhysicsTelemetry.ShapeTypePacket shapeType = 2;
  void clear_shapetype();
  ::PhysicsTelemetry::ShapeTypePacket shapetype() const;
  void set_shapetype(::PhysicsTelemetry::ShapeTypePacket value);
  private:
  ::PhysicsTelemetry::ShapeTypePacket _internal_shapetype() const;
  void _internal_set_shapetype(::PhysicsTelemetry::ShapeTypePacket value);
  public:

  // @@protoc_insertion_point(class_scope:PhysicsTelemetry.ShapeFrameIterationPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PhysicsTelemetry::ObbShapePacket* obbshape_;
  ::PhysicsTelemetry::TetrahedronShapePacket* tetrahedronshape_;
  ::PhysicsTelemetry::ConvexHullShapePacket* convexhullshape_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frameid_;
  int shapetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5ffile_2eproto;
};
// -------------------------------------------------------------------

class ShapeDataPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PhysicsTelemetry.ShapeDataPacket) */ {
 public:
  ShapeDataPacket();
  virtual ~ShapeDataPacket();

  ShapeDataPacket(const ShapeDataPacket& from);
  ShapeDataPacket(ShapeDataPacket&& from) noexcept
    : ShapeDataPacket() {
    *this = ::std::move(from);
  }

  inline ShapeDataPacket& operator=(const ShapeDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeDataPacket& operator=(ShapeDataPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShapeDataPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShapeDataPacket* internal_default_instance() {
    return reinterpret_cast<const ShapeDataPacket*>(
               &_ShapeDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShapeDataPacket& a, ShapeDataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeDataPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeDataPacket* New() const final {
    return CreateMaybeMessage<ShapeDataPacket>(nullptr);
  }

  ShapeDataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeDataPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeDataPacket& from);
  void MergeFrom(const ShapeDataPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeDataPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PhysicsTelemetry.ShapeDataPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_5ffile_2eproto);
    return ::descriptor_table_telemetry_5ffile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapesFieldNumber = 1,
  };
  // repeated .PhysicsTelemetry.ShapeFrameIterationPacket shapes = 1;
  int shapes_size() const;
  private:
  int _internal_shapes_size() const;
  public:
  void clear_shapes();
  ::PhysicsTelemetry::ShapeFrameIterationPacket* mutable_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::ShapeFrameIterationPacket >*
      mutable_shapes();
  private:
  const ::PhysicsTelemetry::ShapeFrameIterationPacket& _internal_shapes(int index) const;
  ::PhysicsTelemetry::ShapeFrameIterationPacket* _internal_add_shapes();
  public:
  const ::PhysicsTelemetry::ShapeFrameIterationPacket& shapes(int index) const;
  ::PhysicsTelemetry::ShapeFrameIterationPacket* add_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::ShapeFrameIterationPacket >&
      shapes() const;

  // @@protoc_insertion_point(class_scope:PhysicsTelemetry.ShapeDataPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::ShapeFrameIterationPacket > shapes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5ffile_2eproto;
};
// -------------------------------------------------------------------

class FrameDataPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PhysicsTelemetry.FrameDataPacket) */ {
 public:
  FrameDataPacket();
  virtual ~FrameDataPacket();

  FrameDataPacket(const FrameDataPacket& from);
  FrameDataPacket(FrameDataPacket&& from) noexcept
    : FrameDataPacket() {
    *this = ::std::move(from);
  }

  inline FrameDataPacket& operator=(const FrameDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameDataPacket& operator=(FrameDataPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameDataPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameDataPacket* internal_default_instance() {
    return reinterpret_cast<const FrameDataPacket*>(
               &_FrameDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameDataPacket& a, FrameDataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameDataPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameDataPacket* New() const final {
    return CreateMaybeMessage<FrameDataPacket>(nullptr);
  }

  FrameDataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameDataPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameDataPacket& from);
  void MergeFrom(const FrameDataPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameDataPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PhysicsTelemetry.FrameDataPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_5ffile_2eproto);
    return ::descriptor_table_telemetry_5ffile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
    kShapeDataFieldNumber = 2,
  };
  // repeated .PhysicsTelemetry.FrameSnapshotPacket frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::PhysicsTelemetry::FrameSnapshotPacket* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::FrameSnapshotPacket >*
      mutable_frames();
  private:
  const ::PhysicsTelemetry::FrameSnapshotPacket& _internal_frames(int index) const;
  ::PhysicsTelemetry::FrameSnapshotPacket* _internal_add_frames();
  public:
  const ::PhysicsTelemetry::FrameSnapshotPacket& frames(int index) const;
  ::PhysicsTelemetry::FrameSnapshotPacket* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::FrameSnapshotPacket >&
      frames() const;

  // .PhysicsTelemetry.ShapeDataPacket shapeData = 2;
  bool has_shapedata() const;
  private:
  bool _internal_has_shapedata() const;
  public:
  void clear_shapedata();
  const ::PhysicsTelemetry::ShapeDataPacket& shapedata() const;
  ::PhysicsTelemetry::ShapeDataPacket* release_shapedata();
  ::PhysicsTelemetry::ShapeDataPacket* mutable_shapedata();
  void set_allocated_shapedata(::PhysicsTelemetry::ShapeDataPacket* shapedata);
  private:
  const ::PhysicsTelemetry::ShapeDataPacket& _internal_shapedata() const;
  ::PhysicsTelemetry::ShapeDataPacket* _internal_mutable_shapedata();
  public:

  // @@protoc_insertion_point(class_scope:PhysicsTelemetry.FrameDataPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::FrameSnapshotPacket > frames_;
  ::PhysicsTelemetry::ShapeDataPacket* shapedata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_5ffile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameSnapshotPacket

// uint32 frameId = 1;
inline void FrameSnapshotPacket::clear_frameid() {
  frameid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameSnapshotPacket::_internal_frameid() const {
  return frameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameSnapshotPacket::frameid() const {
  // @@protoc_insertion_point(field_get:PhysicsTelemetry.FrameSnapshotPacket.frameId)
  return _internal_frameid();
}
inline void FrameSnapshotPacket::_internal_set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frameid_ = value;
}
inline void FrameSnapshotPacket::set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:PhysicsTelemetry.FrameSnapshotPacket.frameId)
}

// repeated .PhysicsTelemetry.RigidBodyPacket rigidBodies = 2;
inline int FrameSnapshotPacket::_internal_rigidbodies_size() const {
  return rigidbodies_.size();
}
inline int FrameSnapshotPacket::rigidbodies_size() const {
  return _internal_rigidbodies_size();
}
inline ::PhysicsTelemetry::RigidBodyPacket* FrameSnapshotPacket::mutable_rigidbodies(int index) {
  // @@protoc_insertion_point(field_mutable:PhysicsTelemetry.FrameSnapshotPacket.rigidBodies)
  return rigidbodies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::RigidBodyPacket >*
FrameSnapshotPacket::mutable_rigidbodies() {
  // @@protoc_insertion_point(field_mutable_list:PhysicsTelemetry.FrameSnapshotPacket.rigidBodies)
  return &rigidbodies_;
}
inline const ::PhysicsTelemetry::RigidBodyPacket& FrameSnapshotPacket::_internal_rigidbodies(int index) const {
  return rigidbodies_.Get(index);
}
inline const ::PhysicsTelemetry::RigidBodyPacket& FrameSnapshotPacket::rigidbodies(int index) const {
  // @@protoc_insertion_point(field_get:PhysicsTelemetry.FrameSnapshotPacket.rigidBodies)
  return _internal_rigidbodies(index);
}
inline ::PhysicsTelemetry::RigidBodyPacket* FrameSnapshotPacket::_internal_add_rigidbodies() {
  return rigidbodies_.Add();
}
inline ::PhysicsTelemetry::RigidBodyPacket* FrameSnapshotPacket::add_rigidbodies() {
  // @@protoc_insertion_point(field_add:PhysicsTelemetry.FrameSnapshotPacket.rigidBodies)
  return _internal_add_rigidbodies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::RigidBodyPacket >&
FrameSnapshotPacket::rigidbodies() const {
  // @@protoc_insertion_point(field_list:PhysicsTelemetry.FrameSnapshotPacket.rigidBodies)
  return rigidbodies_;
}

// -------------------------------------------------------------------

// ShapeFrameIterationPacket

// uint32 frameId = 1;
inline void ShapeFrameIterationPacket::clear_frameid() {
  frameid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShapeFrameIterationPacket::_internal_frameid() const {
  return frameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShapeFrameIterationPacket::frameid() const {
  // @@protoc_insertion_point(field_get:PhysicsTelemetry.ShapeFrameIterationPacket.frameId)
  return _internal_frameid();
}
inline void ShapeFrameIterationPacket::_internal_set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frameid_ = value;
}
inline void ShapeFrameIterationPacket::set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:PhysicsTelemetry.ShapeFrameIterationPacket.frameId)
}

// .PhysicsTelemetry.ShapeTypePacket shapeType = 2;
inline void ShapeFrameIterationPacket::clear_shapetype() {
  shapetype_ = 0;
}
inline ::PhysicsTelemetry::ShapeTypePacket ShapeFrameIterationPacket::_internal_shapetype() const {
  return static_cast< ::PhysicsTelemetry::ShapeTypePacket >(shapetype_);
}
inline ::PhysicsTelemetry::ShapeTypePacket ShapeFrameIterationPacket::shapetype() const {
  // @@protoc_insertion_point(field_get:PhysicsTelemetry.ShapeFrameIterationPacket.shapeType)
  return _internal_shapetype();
}
inline void ShapeFrameIterationPacket::_internal_set_shapetype(::PhysicsTelemetry::ShapeTypePacket value) {
  
  shapetype_ = value;
}
inline void ShapeFrameIterationPacket::set_shapetype(::PhysicsTelemetry::ShapeTypePacket value) {
  _internal_set_shapetype(value);
  // @@protoc_insertion_point(field_set:PhysicsTelemetry.ShapeFrameIterationPacket.shapeType)
}

// .PhysicsTelemetry.ObbShapePacket obbShape = 3;
inline bool ShapeFrameIterationPacket::_internal_has_obbshape() const {
  return this != internal_default_instance() && obbshape_ != nullptr;
}
inline bool ShapeFrameIterationPacket::has_obbshape() const {
  return _internal_has_obbshape();
}
inline const ::PhysicsTelemetry::ObbShapePacket& ShapeFrameIterationPacket::_internal_obbshape() const {
  const ::PhysicsTelemetry::ObbShapePacket* p = obbshape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PhysicsTelemetry::ObbShapePacket*>(
      &::PhysicsTelemetry::_ObbShapePacket_default_instance_);
}
inline const ::PhysicsTelemetry::ObbShapePacket& ShapeFrameIterationPacket::obbshape() const {
  // @@protoc_insertion_point(field_get:PhysicsTelemetry.ShapeFrameIterationPacket.obbShape)
  return _internal_obbshape();
}
inline ::PhysicsTelemetry::ObbShapePacket* ShapeFrameIterationPacket::release_obbshape() {
  // @@protoc_insertion_point(field_release:PhysicsTelemetry.ShapeFrameIterationPacket.obbShape)
  
  ::PhysicsTelemetry::ObbShapePacket* temp = obbshape_;
  obbshape_ = nullptr;
  return temp;
}
inline ::PhysicsTelemetry::ObbShapePacket* ShapeFrameIterationPacket::_internal_mutable_obbshape() {
  
  if (obbshape_ == nullptr) {
    auto* p = CreateMaybeMessage<::PhysicsTelemetry::ObbShapePacket>(GetArenaNoVirtual());
    obbshape_ = p;
  }
  return obbshape_;
}
inline ::PhysicsTelemetry::ObbShapePacket* ShapeFrameIterationPacket::mutable_obbshape() {
  // @@protoc_insertion_point(field_mutable:PhysicsTelemetry.ShapeFrameIterationPacket.obbShape)
  return _internal_mutable_obbshape();
}
inline void ShapeFrameIterationPacket::set_allocated_obbshape(::PhysicsTelemetry::ObbShapePacket* obbshape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(obbshape_);
  }
  if (obbshape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obbshape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obbshape, submessage_arena);
    }
    
  } else {
    
  }
  obbshape_ = obbshape;
  // @@protoc_insertion_point(field_set_allocated:PhysicsTelemetry.ShapeFrameIterationPacket.obbShape)
}

// .PhysicsTelemetry.TetrahedronShapePacket tetrahedronShape = 4;
inline bool ShapeFrameIterationPacket::_internal_has_tetrahedronshape() const {
  return this != internal_default_instance() && tetrahedronshape_ != nullptr;
}
inline bool ShapeFrameIterationPacket::has_tetrahedronshape() const {
  return _internal_has_tetrahedronshape();
}
inline const ::PhysicsTelemetry::TetrahedronShapePacket& ShapeFrameIterationPacket::_internal_tetrahedronshape() const {
  const ::PhysicsTelemetry::TetrahedronShapePacket* p = tetrahedronshape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PhysicsTelemetry::TetrahedronShapePacket*>(
      &::PhysicsTelemetry::_TetrahedronShapePacket_default_instance_);
}
inline const ::PhysicsTelemetry::TetrahedronShapePacket& ShapeFrameIterationPacket::tetrahedronshape() const {
  // @@protoc_insertion_point(field_get:PhysicsTelemetry.ShapeFrameIterationPacket.tetrahedronShape)
  return _internal_tetrahedronshape();
}
inline ::PhysicsTelemetry::TetrahedronShapePacket* ShapeFrameIterationPacket::release_tetrahedronshape() {
  // @@protoc_insertion_point(field_release:PhysicsTelemetry.ShapeFrameIterationPacket.tetrahedronShape)
  
  ::PhysicsTelemetry::TetrahedronShapePacket* temp = tetrahedronshape_;
  tetrahedronshape_ = nullptr;
  return temp;
}
inline ::PhysicsTelemetry::TetrahedronShapePacket* ShapeFrameIterationPacket::_internal_mutable_tetrahedronshape() {
  
  if (tetrahedronshape_ == nullptr) {
    auto* p = CreateMaybeMessage<::PhysicsTelemetry::TetrahedronShapePacket>(GetArenaNoVirtual());
    tetrahedronshape_ = p;
  }
  return tetrahedronshape_;
}
inline ::PhysicsTelemetry::TetrahedronShapePacket* ShapeFrameIterationPacket::mutable_tetrahedronshape() {
  // @@protoc_insertion_point(field_mutable:PhysicsTelemetry.ShapeFrameIterationPacket.tetrahedronShape)
  return _internal_mutable_tetrahedronshape();
}
inline void ShapeFrameIterationPacket::set_allocated_tetrahedronshape(::PhysicsTelemetry::TetrahedronShapePacket* tetrahedronshape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tetrahedronshape_);
  }
  if (tetrahedronshape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tetrahedronshape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tetrahedronshape, submessage_arena);
    }
    
  } else {
    
  }
  tetrahedronshape_ = tetrahedronshape;
  // @@protoc_insertion_point(field_set_allocated:PhysicsTelemetry.ShapeFrameIterationPacket.tetrahedronShape)
}

// .PhysicsTelemetry.ConvexHullShapePacket convexHullShape = 5;
inline bool ShapeFrameIterationPacket::_internal_has_convexhullshape() const {
  return this != internal_default_instance() && convexhullshape_ != nullptr;
}
inline bool ShapeFrameIterationPacket::has_convexhullshape() const {
  return _internal_has_convexhullshape();
}
inline const ::PhysicsTelemetry::ConvexHullShapePacket& ShapeFrameIterationPacket::_internal_convexhullshape() const {
  const ::PhysicsTelemetry::ConvexHullShapePacket* p = convexhullshape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PhysicsTelemetry::ConvexHullShapePacket*>(
      &::PhysicsTelemetry::_ConvexHullShapePacket_default_instance_);
}
inline const ::PhysicsTelemetry::ConvexHullShapePacket& ShapeFrameIterationPacket::convexhullshape() const {
  // @@protoc_insertion_point(field_get:PhysicsTelemetry.ShapeFrameIterationPacket.convexHullShape)
  return _internal_convexhullshape();
}
inline ::PhysicsTelemetry::ConvexHullShapePacket* ShapeFrameIterationPacket::release_convexhullshape() {
  // @@protoc_insertion_point(field_release:PhysicsTelemetry.ShapeFrameIterationPacket.convexHullShape)
  
  ::PhysicsTelemetry::ConvexHullShapePacket* temp = convexhullshape_;
  convexhullshape_ = nullptr;
  return temp;
}
inline ::PhysicsTelemetry::ConvexHullShapePacket* ShapeFrameIterationPacket::_internal_mutable_convexhullshape() {
  
  if (convexhullshape_ == nullptr) {
    auto* p = CreateMaybeMessage<::PhysicsTelemetry::ConvexHullShapePacket>(GetArenaNoVirtual());
    convexhullshape_ = p;
  }
  return convexhullshape_;
}
inline ::PhysicsTelemetry::ConvexHullShapePacket* ShapeFrameIterationPacket::mutable_convexhullshape() {
  // @@protoc_insertion_point(field_mutable:PhysicsTelemetry.ShapeFrameIterationPacket.convexHullShape)
  return _internal_mutable_convexhullshape();
}
inline void ShapeFrameIterationPacket::set_allocated_convexhullshape(::PhysicsTelemetry::ConvexHullShapePacket* convexhullshape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(convexhullshape_);
  }
  if (convexhullshape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      convexhullshape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convexhullshape, submessage_arena);
    }
    
  } else {
    
  }
  convexhullshape_ = convexhullshape;
  // @@protoc_insertion_point(field_set_allocated:PhysicsTelemetry.ShapeFrameIterationPacket.convexHullShape)
}

// -------------------------------------------------------------------

// ShapeDataPacket

// repeated .PhysicsTelemetry.ShapeFrameIterationPacket shapes = 1;
inline int ShapeDataPacket::_internal_shapes_size() const {
  return shapes_.size();
}
inline int ShapeDataPacket::shapes_size() const {
  return _internal_shapes_size();
}
inline void ShapeDataPacket::clear_shapes() {
  shapes_.Clear();
}
inline ::PhysicsTelemetry::ShapeFrameIterationPacket* ShapeDataPacket::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:PhysicsTelemetry.ShapeDataPacket.shapes)
  return shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::ShapeFrameIterationPacket >*
ShapeDataPacket::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:PhysicsTelemetry.ShapeDataPacket.shapes)
  return &shapes_;
}
inline const ::PhysicsTelemetry::ShapeFrameIterationPacket& ShapeDataPacket::_internal_shapes(int index) const {
  return shapes_.Get(index);
}
inline const ::PhysicsTelemetry::ShapeFrameIterationPacket& ShapeDataPacket::shapes(int index) const {
  // @@protoc_insertion_point(field_get:PhysicsTelemetry.ShapeDataPacket.shapes)
  return _internal_shapes(index);
}
inline ::PhysicsTelemetry::ShapeFrameIterationPacket* ShapeDataPacket::_internal_add_shapes() {
  return shapes_.Add();
}
inline ::PhysicsTelemetry::ShapeFrameIterationPacket* ShapeDataPacket::add_shapes() {
  // @@protoc_insertion_point(field_add:PhysicsTelemetry.ShapeDataPacket.shapes)
  return _internal_add_shapes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::ShapeFrameIterationPacket >&
ShapeDataPacket::shapes() const {
  // @@protoc_insertion_point(field_list:PhysicsTelemetry.ShapeDataPacket.shapes)
  return shapes_;
}

// -------------------------------------------------------------------

// FrameDataPacket

// repeated .PhysicsTelemetry.FrameSnapshotPacket frames = 1;
inline int FrameDataPacket::_internal_frames_size() const {
  return frames_.size();
}
inline int FrameDataPacket::frames_size() const {
  return _internal_frames_size();
}
inline void FrameDataPacket::clear_frames() {
  frames_.Clear();
}
inline ::PhysicsTelemetry::FrameSnapshotPacket* FrameDataPacket::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:PhysicsTelemetry.FrameDataPacket.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::FrameSnapshotPacket >*
FrameDataPacket::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:PhysicsTelemetry.FrameDataPacket.frames)
  return &frames_;
}
inline const ::PhysicsTelemetry::FrameSnapshotPacket& FrameDataPacket::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::PhysicsTelemetry::FrameSnapshotPacket& FrameDataPacket::frames(int index) const {
  // @@protoc_insertion_point(field_get:PhysicsTelemetry.FrameDataPacket.frames)
  return _internal_frames(index);
}
inline ::PhysicsTelemetry::FrameSnapshotPacket* FrameDataPacket::_internal_add_frames() {
  return frames_.Add();
}
inline ::PhysicsTelemetry::FrameSnapshotPacket* FrameDataPacket::add_frames() {
  // @@protoc_insertion_point(field_add:PhysicsTelemetry.FrameDataPacket.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PhysicsTelemetry::FrameSnapshotPacket >&
FrameDataPacket::frames() const {
  // @@protoc_insertion_point(field_list:PhysicsTelemetry.FrameDataPacket.frames)
  return frames_;
}

// .PhysicsTelemetry.ShapeDataPacket shapeData = 2;
inline bool FrameDataPacket::_internal_has_shapedata() const {
  return this != internal_default_instance() && shapedata_ != nullptr;
}
inline bool FrameDataPacket::has_shapedata() const {
  return _internal_has_shapedata();
}
inline void FrameDataPacket::clear_shapedata() {
  if (GetArenaNoVirtual() == nullptr && shapedata_ != nullptr) {
    delete shapedata_;
  }
  shapedata_ = nullptr;
}
inline const ::PhysicsTelemetry::ShapeDataPacket& FrameDataPacket::_internal_shapedata() const {
  const ::PhysicsTelemetry::ShapeDataPacket* p = shapedata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PhysicsTelemetry::ShapeDataPacket*>(
      &::PhysicsTelemetry::_ShapeDataPacket_default_instance_);
}
inline const ::PhysicsTelemetry::ShapeDataPacket& FrameDataPacket::shapedata() const {
  // @@protoc_insertion_point(field_get:PhysicsTelemetry.FrameDataPacket.shapeData)
  return _internal_shapedata();
}
inline ::PhysicsTelemetry::ShapeDataPacket* FrameDataPacket::release_shapedata() {
  // @@protoc_insertion_point(field_release:PhysicsTelemetry.FrameDataPacket.shapeData)
  
  ::PhysicsTelemetry::ShapeDataPacket* temp = shapedata_;
  shapedata_ = nullptr;
  return temp;
}
inline ::PhysicsTelemetry::ShapeDataPacket* FrameDataPacket::_internal_mutable_shapedata() {
  
  if (shapedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PhysicsTelemetry::ShapeDataPacket>(GetArenaNoVirtual());
    shapedata_ = p;
  }
  return shapedata_;
}
inline ::PhysicsTelemetry::ShapeDataPacket* FrameDataPacket::mutable_shapedata() {
  // @@protoc_insertion_point(field_mutable:PhysicsTelemetry.FrameDataPacket.shapeData)
  return _internal_mutable_shapedata();
}
inline void FrameDataPacket::set_allocated_shapedata(::PhysicsTelemetry::ShapeDataPacket* shapedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shapedata_;
  }
  if (shapedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shapedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shapedata, submessage_arena);
    }
    
  } else {
    
  }
  shapedata_ = shapedata;
  // @@protoc_insertion_point(field_set_allocated:PhysicsTelemetry.FrameDataPacket.shapeData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PhysicsTelemetry

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_telemetry_5ffile_2eproto
